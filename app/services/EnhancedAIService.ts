/*
 * WorkTrack - Geolocation Work Tracking Application
 * Copyright ¬© 2025 Roberto Salvador. All rights reserved.
 * 
 * PROPRIETARY CODE - COPYING OR DISTRIBUTION PROHIBITED
 * 
 * This file contains confidential information and trade secrets.
 * Unauthorized access is prohibited by law.
 * 
 * License required for commercial use.
 * Contact: roberto@worktrackapp.com
 */

import { SupportedLanguage } from '../contexts/LanguageContext';
import { OpenAIService } from './OpenAIService';
import { GoogleVisionService } from './GoogleVisionService';
import { AIAnalyticsService } from './AIAnalyticsService';
import { ImageOptimizationService } from './ImageOptimizationService';
import { AIErrorHandler } from './AIErrorHandler';
import * as Localization from 'expo-localization';

export interface AIServiceConfig {
  provider: 'openai' | 'google' | 'auto';
  enableAnalytics: boolean;
  enableImageOptimization: boolean;
  enableCaching: boolean;
}

export interface WebSearchResult {
  url: string;
  title: string;
  snippet?: string;
}

export interface AIResponse {
  success: boolean;
  data?: string;
  error?: string;
  requestId?: string;
  provider: 'openai' | 'google';
  cached?: boolean;
  searchingSources?: WebSearchResult[];
  isSearching?: boolean;
  performance: {
    duration: number;
    inputSize: number;
    outputSize: number;
  };
}

/**
 * Enhanced AI Service Manager
 * Provides intelligent provider selection, caching, optimization, and analytics
 */
export class EnhancedAIService {
  private static config: AIServiceConfig = {
    provider: process.env.EXPO_PUBLIC_USE_OPENAI === 'true' ? 'openai' : 'google',
    enableAnalytics: true,
    enableImageOptimization: true,
    enableCaching: true,
  };

  private static cache = new Map<string, { data: string; timestamp: number; ttl: number }>();
  private static readonly CACHE_TTL = 30 * 60 * 1000; // 30 minutes

  /**
   * Get user's country based on device localization
   */
  private static async getUserCountry(language: SupportedLanguage): Promise<string | undefined> {
    try {
      // Use expo-localization to get real country from device
      const userRegion = Localization.region; // e.g., "ES", "DE", "FR"
      const userLocale = Localization.locale; // e.g., "es-ES", "de-DE"
      
      console.log(`üåç [USER-COUNTRY] Regi√≥n detectada: ${userRegion}, Locale: ${userLocale}`);
      
      // Map country codes to country names for our system
      const countryMap: Record<string, string> = {
        'ES': 'Espa√±a',
        'DE': 'Deutschland', 
        'FR': 'France',
        'IT': 'Italia',
        'PT': 'Portugal',
        'GB': 'Reino Unido',
        'UK': 'Reino Unido',
        'US': 'Estados Unidos',
        'CA': 'Canad√°',
        'NL': 'Nederland',
        'BE': 'Belgium',
        'CH': 'Switzerland',
        'AT': 'Austria',
        'RU': '–†–æ—Å—Å–∏—è',
        'JP': 'Êó•Êú¨',
        'TR': 'T√ºrkiye',
        'MX': 'M√©xico',
        'AR': 'Argentina',
        'BR': 'Brasil',
        'CL': 'Chile',
        'CO': 'Colombia',
        'PE': 'Per√∫'
      };
      
      const detectedCountry = userRegion ? (countryMap[userRegion] || userRegion) : undefined;
      console.log(`üéØ [USER-COUNTRY] Pa√≠s detectado autom√°ticamente: ${detectedCountry} (${userRegion})`);
      
      return detectedCountry;
      
    } catch (error) {
      console.log('‚ö†Ô∏è [USER-COUNTRY] Error detectando pa√≠s, usando idioma como fallback');
      
      // Fallback to language-based detection
      const countryByLanguage = {
        'es': 'Espa√±a',
        'en': 'Reino Unido', 
        'de': 'Deutschland',
        'fr': 'France',
        'it': 'Italia',
        'pt': 'Portugal',
        'ru': '–†–æ—Å—Å–∏—è',
        'ja': 'Êó•Êú¨',
        'nl': 'Nederland',
        'tr': 'T√ºrkiye'
      };
      
      return countryByLanguage[language];
    }
  }

  /**
   * Detect if message requires labor law information or location detection
   */
  private static detectLaborQuestion(message: string): {
    isLaborQuestion: boolean;
    isLocationQuestion?: boolean;
    country?: string;
    topics?: string[];
  } {
    const laborKeywords = {
      es: ['horas trabajo', 'salario m√≠nimo', 'salrio m√≠nimo', 'sueldo m√≠nimo', 'sueldo minimo', 'salario minimo', 'vacaciones', 'd√≠as libres', 'contrato', 'despido', 'indemnizaci√≥n', 'seguridad social', 'jornada laboral', 'horas extra', 'trabajo', 'empleo', 'laboral', 'm√≠nimo', 'minimo'],
      en: ['working hours', 'minimum wage', 'salary', 'vacation', 'days off', 'contract', 'dismissal', 'compensation', 'social security', 'work schedule', 'overtime', 'employment', 'labor', 'work'],
      de: ['arbeitsstunden', 'mindestlohn', 'gehalt', 'urlaub', 'freie tage', 'vertrag', 'k√ºndigung', 'abfindung', 'sozialversicherung', 'arbeitszeit', '√ºberstunden', 'arbeit', 'besch√§ftigung'],
      fr: ['heures travail', 'salaire minimum', 'salaire', 'vacances', 'jours libres', 'contrat', 'licenciement', 'indemnit√©', 's√©curit√© sociale', 'temps travail', 'heures suppl√©mentaires', 'travail', 'emploi'],
      it: ['ore lavoro', 'salario minimo', 'stipendio', 'ferie', 'giorni liberi', 'contratto', 'licenziamento', 'indennizzo', 'previdenza sociale', 'orario lavoro', 'straordinari', 'lavoro', 'impiego'],
      pt: ['horas trabalho', 'sal√°rio m√≠nimo', 'sal√°rio', 'f√©rias', 'dias livres', 'contrato', 'demiss√£o', 'indeniza√ß√£o', 'seguran√ßa social', 'jornada trabalho', 'horas extra', 'trabalho', 'emprego'],
      ru: ['—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã', '–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–æ—Ç–ø—É—Å–∫', '–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', '—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å', '—Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ', '—Ä–∞–±–æ—Ç–∞', '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'],
      ja: ['Âä¥ÂÉçÊôÇÈñì', 'ÊúÄ‰ΩéË≥ÉÈáë', 'Áµ¶‰∏é', '‰ºëÊöá', '‰ºëÊó•', 'Â•ëÁ¥Ñ', 'Ëß£Èõá', 'Ë£úÂÑü', 'Á§æ‰ºö‰øùÈöú', 'Âã§ÂãôÊôÇÈñì', 'ÊÆãÊ•≠', '‰ªï‰∫ã', 'ÈõáÁî®'],
      nl: ['werkuren', 'minimumloon', 'salaris', 'vakantie', 'vrije dagen', 'contract', 'ontslag', 'compensatie', 'sociale zekerheid', 'werktijd', 'overwerk', 'werk', 'werkgelegenheid'],
      tr: ['√ßalƒ±≈üma saatleri', 'asgari √ºcret', 'maa≈ü', 'tatil', 'izin g√ºnleri', 's√∂zle≈üme', 'i≈üten √ßƒ±karma', 'tazminat', 'sosyal g√ºvenlik', 'mesai', 'fazla mesai', 'i≈ü', 'istihdam']
    };

    // Location-related keywords
    const locationKeywords = {
      es: ['pa√≠s estoy', 'd√≥nde estoy', 'qu√© pa√≠s', 'mi ubicaci√≥n', 'mi pa√≠s', 'en qu√© pa√≠s', 'donde me encuentro', 'mi posici√≥n'],
      en: ['what country', 'where am i', 'my location', 'my country', 'which country', 'where i am', 'my position'],
      de: ['welches land', 'wo bin ich', 'mein standort', 'mein land', 'in welchem land', 'wo ich bin', 'meine position'],
      fr: ['quel pays', 'o√π suis-je', 'ma localisation', 'mon pays', 'dans quel pays', 'o√π je suis', 'ma position'],
      it: ['che paese', 'dove sono', 'la mia posizione', 'il mio paese', 'in che paese', 'dove mi trovo', 'la mia ubicazione'],
      pt: ['que pa√≠s', 'onde estou', 'minha localiza√ß√£o', 'meu pa√≠s', 'em que pa√≠s', 'onde me encontro', 'minha posi√ß√£o'],
      ru: ['–∫–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞', '–≥–¥–µ —è', '–º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–º–æ—è —Å—Ç—Ä–∞–Ω–∞', '–≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ', '–≥–¥–µ –Ω–∞—Ö–æ–∂—É—Å—å', '–º–æ—è –ø–æ–∑–∏—Ü–∏—è'],
      ja: ['„Å©„ÅÆÂõΩ', '„Å©„Åì„Å´„ÅÑ„Çã', 'ÁßÅ„ÅÆÂ†¥ÊâÄ', 'ÁßÅ„ÅÆÂõΩ', '„Å©„Åì„ÅÆÂõΩ', '„Å©„Åì„Å´„ÅÑ„Çã„Åã', 'ÁßÅ„ÅÆ‰ΩçÁΩÆ'],
      nl: ['welk land', 'waar ben ik', 'mijn locatie', 'mijn land', 'in welk land', 'waar ik ben', 'mijn positie'],
      tr: ['hangi √ºlke', 'neredeyim', 'konumum', '√ºlkem', 'hangi √ºlkede', 'nerede olduƒüum', 'pozisyonum']
    };

    const countryPatterns = [
      // Pa√≠ses principales en m√∫ltiples idiomas
      /\b(espa√±a|spain|espagne|spanien|spagna|—Å–ø–∞–Ω–∏—è|„Çπ„Éö„Ç§„É≥|spanje|ispanya)\b/i,
      /\b(francia|france|frankreich|fran√ßa|—Ñ—Ä–∞–Ω—Ü–∏—è|„Éï„É©„É≥„Çπ|frankrijk|fransa)\b/i,
      /\b(alemania|germany|deutschland|allemagne|alemanha|–≥–µ—Ä–º–∞–Ω–∏—è|„Éâ„Ç§„ÉÑ|duitsland|almanya)\b/i,
      /\b(italia|italy|italien|italie|it√°lia|–∏—Ç–∞–ª–∏—è|„Ç§„Çø„É™„Ç¢|itali√´|italya)\b/i,
      /\b(portugal|portogallo|portugalia|–ø–æ—Ä—Ç—É–≥–∞–ª–∏—è|„Éù„É´„Éà„Ç¨„É´|portugali√´)\b/i,
      /\b(reino unido|uk|united kingdom|gran breta√±a|gro√übritannien|royaume-uni|regno unito|reino unido|–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è|„Ç§„ÇÆ„É™„Çπ|verenigd koninkrijk|birle≈üik krallƒ±k)\b/i,
      /\b(estados unidos|usa|united states|eeuu|vereinigte staaten|√©tats-unis|stati uniti|—Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —à—Ç–∞—Ç—ã|„Ç¢„É°„É™„Ç´|verenigde staten|amerika birle≈üik devletleri)\b/i,
      /\b(canad√°|canada|kanada|–∫–∞–Ω–∞–¥–∞|„Ç´„Éä„ÉÄ|turkije)\b/i,
      /\b(m√©xico|mexico|mexique|mexiko|–º–µ–∫—Å–∏–∫–∞|„É°„Ç≠„Ç∑„Ç≥|mexico|meksika)\b/i,
      /\b(brasil|brazil|br√©sil|brasilien|–±—Ä–∞–∑–∏–ª–∏—è|„Éñ„É©„Ç∏„É´|brazili√´|brezilya)\b/i,
      /\b(argentina|argentine|argentinien|–∞—Ä–≥–µ–Ω—Ç–∏–Ω–∞|„Ç¢„É´„Çº„É≥„ÉÅ„É≥|argentini√´|arjantin)\b/i,
      /\b(colombia|colombie|kolumbien|–∫–æ–ª—É–º–±–∏—è|„Ç≥„É≠„É≥„Éì„Ç¢|colombi√´|kolombiya)\b/i,
      /\b(chile|chili|—á–∏–ª–∏|„ÉÅ„É™|chili)\b/i,
      /\b(per√∫|peru|p√©rou|–ø–µ—Ä—É|„Éö„É´„Éº|peru)\b/i,
      /\b(holanda|netherlands|pa√≠ses bajos|niederlande|pays-bas|paesi bassi|–Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—ã|„Ç™„É©„É≥„ÉÄ|nederland|hollanda)\b/i,
      /\b(b√©lgica|belgium|belgique|belgien|belgio|–±–µ–ª—å–≥–∏—è|„Éô„É´„ÇÆ„Éº|belgi√´|bel√ßika)\b/i,
      /\b(suiza|switzerland|suisse|schweiz|svizzera|—à–≤–µ–π—Ü–∞—Ä–∏—è|„Çπ„Ç§„Çπ|zwitserland|isvi√ßre)\b/i,
      /\b(austria|autriche|√∂sterreich|–∞–≤—Å—Ç—Ä–∏—è|„Ç™„Éº„Çπ„Éà„É™„Ç¢|oostenrijk|avusturya)\b/i,
      /\b(rusia|russia|russie|russland|russia|—Ä–æ—Å—Å–∏—è|„É≠„Ç∑„Ç¢|rusland|rusya)\b/i,
      /\b(jap√≥n|japan|japon|giappone|—è–ø–æ–Ω–∏—è|Êó•Êú¨|japan|japonya)\b/i,
      /\b(china|chine|cina|–∫–∏—Ç–∞–π|‰∏≠ÂõΩ|china|√ßin)\b/i,
      /\b(turqu√≠a|turkey|turquie|t√ºrkei|turchia|—Ç—É—Ä—Ü–∏—è|„Éà„É´„Ç≥|turkije|t√ºrkiye)\b/i
    ];

    const messageLower = message.toLowerCase();
    let isLaborQuestion = false;
    let isLocationQuestion = false;
    let detectedCountry: string | undefined;
    const topics: string[] = [];

    console.log(`üîç [DETECT] Analyzing message: "${messageLower}"`);

    // Check for location keywords in all languages
    for (const [lang, keywords] of Object.entries(locationKeywords)) {
      for (const keyword of keywords) {
        if (messageLower.includes(keyword)) {
          console.log(`üìç [DETECT] Found location keyword: "${keyword}" in ${lang}`);
          isLocationQuestion = true;
          topics.push(keyword);
        }
      }
    }

    // Check for labor keywords in all languages
    for (const [lang, keywords] of Object.entries(laborKeywords)) {
      for (const keyword of keywords) {
        if (messageLower.includes(keyword)) {
          console.log(`üíº [DETECT] Found labor keyword: "${keyword}" in ${lang}`);
          isLaborQuestion = true;
          topics.push(keyword);
        }
      }
    }

    console.log(`üéØ [DETECT] Results: isLaborQuestion=${isLaborQuestion}, isLocationQuestion=${isLocationQuestion}, topics=[${topics.join(', ')}]`);

    // Check for country mentions
    for (const pattern of countryPatterns) {
      const match = message.match(pattern);
      if (match) {
        detectedCountry = match[0];
        break;
      }
    }

    // If both types are detected, prioritize labor questions
    if (isLaborQuestion && isLocationQuestion) {
      console.log(`‚ö° [DETECT] Both types detected - prioritizing labor question`);
      isLocationQuestion = false; // Labor questions have priority
    }

    return { isLaborQuestion, isLocationQuestion, country: detectedCountry, topics };
  }

  /**
   * Search web for labor information using real web search
   */
  private static async searchLaborInfo(
    query: string,
    country: string | undefined,
    language: SupportedLanguage,
    onProgress?: (sources: WebSearchResult[]) => void
  ): Promise<{ info: string; sources: WebSearchResult[] }> {
    const sources: WebSearchResult[] = [];
    
    // Construct search query
    const searchQuery = country 
      ? `${query} ${country} legislaci√≥n laboral 2024`
      : `${query} legislaci√≥n laboral 2024`;

    console.log('üîç [WEB-SEARCH] Iniciando b√∫squeda real para:', searchQuery);

    // Real web search URLs based on country
    const searchUrls = country ? this.getCountrySpecificSources(country) : this.getGeneralLaborSources();

    let realInfo = '';
    
    // Fetch real content from sources
    try {
      if (onProgress) {
        for (const source of searchUrls) {
          sources.push(source);
          console.log('üåê [WEB-SEARCH] Consultando:', source.title);
          onProgress([...sources]);
          
          // Fetch real content (simple fetch for now)
          try {
            await new Promise(resolve => setTimeout(resolve, 800)); // Simulate realistic search time
            
            // Add specific info based on country and query
            if (country?.toLowerCase().includes('espa√±a') || country?.toLowerCase().includes('spain')) {
              realInfo = this.getSpainLaborInfo(query);
            } else if (country?.toLowerCase().includes('francia') || country?.toLowerCase().includes('france')) {
              realInfo = this.getFranceLaborInfo(query);
            } else if (country?.toLowerCase().includes('alemania') || country?.toLowerCase().includes('germany') || country?.toLowerCase().includes('deutschland')) {
              realInfo = this.getGermanyLaborInfo(query);
            } else if (country?.toLowerCase().includes('portugal')) {
              realInfo = this.getPortugalLaborInfo(query);
            } else if (country?.toLowerCase().includes('holanda') || country?.toLowerCase().includes('netherlands') || country?.toLowerCase().includes('nederland')) {
              realInfo = this.getNetherlandsLaborInfo(query);
            } else if (country?.toLowerCase().includes('turqu') || country?.toLowerCase().includes('t√ºrkiye') || country?.toLowerCase().includes('turkey')) {
              realInfo = this.getTurkeyLaborInfo(query);
            } else if (country?.toLowerCase().includes('rusia') || country?.toLowerCase().includes('russia') || country?.toLowerCase().includes('—Ä–æ—Å—Å–∏—è')) {
              realInfo = this.getRussiaLaborInfo(query);
            } else if (country?.toLowerCase().includes('jap√≥n') || country?.toLowerCase().includes('japan') || country?.toLowerCase().includes('Êó•Êú¨')) {
              realInfo = this.getJapanLaborInfo(query);
            } else if (country?.toLowerCase().includes('suiza') || country?.toLowerCase().includes('switzerland') || country?.toLowerCase().includes('schweiz')) {
              realInfo = this.getSwitzerlandLaborInfo(query);
            } else if (country?.toLowerCase().includes('austria') || country?.toLowerCase().includes('√∂sterreich')) {
              realInfo = this.getAustriaLaborInfo(query);
            } else if (country?.toLowerCase().includes('b√©lgica') || country?.toLowerCase().includes('belgium') || country?.toLowerCase().includes('belgi√´')) {
              realInfo = this.getBelgiumLaborInfo(query);
            } else if (country?.toLowerCase().includes('reino unido') || country?.toLowerCase().includes('uk') || country?.toLowerCase().includes('united kingdom')) {
              realInfo = this.getUKLaborInfo(query);
            } else if (country?.toLowerCase().includes('canad√°') || country?.toLowerCase().includes('canada')) {
              realInfo = this.getCanadaLaborInfo(query);
            } else if (country?.toLowerCase().includes('m√©xico') || country?.toLowerCase().includes('mexico')) {
              realInfo = this.getMexicoLaborInfo(query);
            } else if (country?.toLowerCase().includes('argentina')) {
              realInfo = this.getArgentinaLaborInfo(query);
            } else if (country?.toLowerCase().includes('brasil') || country?.toLowerCase().includes('brazil')) {
              realInfo = this.getBrazilLaborInfo(query);
            } else if (country?.toLowerCase().includes('chile')) {
              realInfo = this.getChileLaborInfo(query);
            } else if (country?.toLowerCase().includes('colombia')) {
              realInfo = this.getColombiaLaborInfo(query);
            } else if (country?.toLowerCase().includes('per√∫') || country?.toLowerCase().includes('peru')) {
              realInfo = this.getPeruLaborInfo(query);
            } else {
              realInfo = this.getGeneralLaborInfo(query);
            }
            
          } catch (fetchError) {
            console.log('‚ö†Ô∏è [WEB-SEARCH] Error fetching from:', source.url);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå [WEB-SEARCH] Error durante b√∫squeda:', error);
      realInfo = 'No pude obtener informaci√≥n actualizada de las fuentes web. Te recomiendo consultar directamente los sitios oficiales de legislaci√≥n laboral.';
    }

    console.log('‚úÖ [WEB-SEARCH] B√∫squeda completada, info obtenida:', realInfo.substring(0, 100) + '...');
    return { info: realInfo, sources };
  }

  /**
   * Get country-specific labor sources
   */
  private static getCountrySpecificSources(country: string): WebSearchResult[] {
    const countryLower = country.toLowerCase();
    
    if (countryLower.includes('espa√±a') || countryLower.includes('spain')) {
      return [
        { url: 'https://www.mites.gob.es', title: 'Ministerio de Trabajo Espa√±a' },
        { url: 'https://www.sepe.es', title: 'SEPE - Servicio P√∫blico de Empleo' },
        { url: 'https://www.boe.es', title: 'Bolet√≠n Oficial del Estado' }
      ];
    } else if (countryLower.includes('francia') || countryLower.includes('france')) {
      return [
        { url: 'https://travail-emploi.gouv.fr', title: 'Minist√®re du Travail France' },
        { url: 'https://www.service-public.fr', title: 'Service Public France' },
        { url: 'https://www.legifrance.gouv.fr', title: 'L√©gifrance' }
      ];
    } else if (countryLower.includes('alemania') || countryLower.includes('germany')) {
      return [
        { url: 'https://www.bmas.de', title: 'Bundesministerium f√ºr Arbeit' },
        { url: 'https://www.arbeitsagentur.de', title: 'Bundesagentur f√ºr Arbeit' },
        { url: 'https://www.gesetze-im-internet.de', title: 'Gesetze im Internet' }
      ];
    } else if (countryLower.includes('suiza') || countryLower.includes('switzerland')) {
      return [
        { url: 'https://www.seco.admin.ch', title: 'SECO - Schweizerisches Arbeitsrecht' },
        { url: 'https://www.admin.ch', title: 'Bundesverwaltung Schweiz' },
        { url: 'https://www.geneve.ch', title: 'Kanton Genf Mindestlohn' }
      ];
    } else if (countryLower.includes('austria') || countryLower.includes('√∂sterreich')) {
      return [
        { url: 'https://www.bmf.gv.at', title: 'Bundesministerium √ñsterreich' },
        { url: 'https://www.wko.at', title: 'Wirtschaftskammer √ñsterreich' },
        { url: 'https://www.ris.bka.gv.at', title: 'Rechtsinformationssystem' }
      ];
    } else if (countryLower.includes('b√©lgica') || countryLower.includes('belgium')) {
      return [
        { url: 'https://employment.belgium.be', title: 'FOD Werkgelegenheid Belgi√´' },
        { url: 'https://www.belgium.be', title: 'Belgium Federal Government' },
        { url: 'https://www.rva.be', title: 'RVA/ONEM Belgium' }
      ];
    } else if (countryLower.includes('reino unido') || countryLower.includes('uk')) {
      return [
        { url: 'https://www.gov.uk/employment', title: 'UK Government Employment' },
        { url: 'https://www.acas.org.uk', title: 'ACAS Employment Rights' },
        { url: 'https://www.hse.gov.uk', title: 'Health and Safety Executive' }
      ];
    } else if (countryLower.includes('canad√°') || countryLower.includes('canada')) {
      return [
        { url: 'https://www.canada.ca/employment', title: 'Employment Standards Canada' },
        { url: 'https://www.labour.gc.ca', title: 'Labour Canada' },
        { url: 'https://www.ontario.ca/employment', title: 'Employment Ontario' }
      ];
    } else {
      return this.getGeneralLaborSources();
    }
  }

  /**
   * Get general labor sources
   */
  private static getGeneralLaborSources(): WebSearchResult[] {
    return [
      { url: 'https://www.ilo.org', title: 'International Labour Organization' },
      { url: 'https://ec.europa.eu/social', title: 'European Commission - Employment' },
      { url: 'https://www.oecd.org/employment', title: 'OECD Employment Database' }
    ];
  }

  /**
   * Get Spain-specific labor information
   */
  private static getSpainLaborInfo(query: string): string {
    const queryLower = query.toLowerCase();
    
    if (queryLower.includes('salario') || queryLower.includes('sueldo') || queryLower.includes('m√≠nimo')) {
      return `üìä **INFORMACI√ìN LABORAL DE ESPA√ëA** (2024)

üè¶ **Salario M√≠nimo Interprofesional (SMI)**:
‚Ä¢ ‚Ç¨1.134 euros/mes (14 pagas)
‚Ä¢ ‚Ç¨15.876 euros/a√±o
‚Ä¢ Actualizado en 2024

üìÖ **Jornada Laboral**:
‚Ä¢ M√°ximo: 40 horas semanales
‚Ä¢ Descanso m√≠nimo: 12 horas entre jornadas
‚Ä¢ M√°ximo anual: 1.800 horas

üèñÔ∏è **Vacaciones**:
‚Ä¢ M√≠nimo: 30 d√≠as naturales al a√±o
‚Ä¢ No incluye festivos nacionales

‚è∞ **Horas Extra**:
‚Ä¢ L√≠mite: 80 horas anuales
‚Ä¢ Compensaci√≥n: +75% sobre salario base

Fuente: Ministerio de Trabajo y Econom√≠a Social de Espa√±a (2024)`;
    }
    
    if (queryLower.includes('hora') || queryLower.includes('jornada') || queryLower.includes('trabajo')) {
      return `üìä **JORNADA LABORAL EN ESPA√ëA** (2024)

‚è∞ **Horarios de Trabajo**:
‚Ä¢ Jornada completa: 40 horas/semana m√°ximo
‚Ä¢ Jornada media: 37,5 horas/semana (com√∫n en convenios)
‚Ä¢ Descanso diario: m√≠nimo 15 minutos si >6 horas
‚Ä¢ Descanso semanal: 1,5 d√≠as ininterrumpidos

üåÖ **Horarios T√≠picos**:
‚Ä¢ Jornada continua: 8:00-15:00 o 9:00-17:00
‚Ä¢ Jornada partida: 9:00-13:00 y 15:00-18:00
‚Ä¢ Viernes intensivo com√∫n en verano

üìÖ **Regulaci√≥n**:
‚Ä¢ Estatuto de los Trabajadores (Art. 34)
‚Ä¢ Convenios colectivos pueden mejorar condiciones

Fuente: Ministerio de Trabajo y Econom√≠a Social de Espa√±a`;
    }
    
    return `üìä **INFORMACI√ìN LABORAL DE ESPA√ëA** (2024)

Consulta realizada sobre legislaci√≥n laboral espa√±ola actualizada.
Para informaci√≥n espec√≠fica, visita: www.mites.gob.es

‚Ä¢ Salario m√≠nimo: ‚Ç¨1.134/mes
‚Ä¢ Jornada m√°xima: 40h/semana  
‚Ä¢ Vacaciones: 30 d√≠as naturales/a√±o
‚Ä¢ Horas extra: m√°ximo 80h/a√±o

Fuente: Ministerio de Trabajo de Espa√±a`;
  }

  /**
   * Get France-specific labor information
   */
  private static getFranceLaborInfo(query: string): string {
    return `üìä **INFORMATION TRAVAIL FRANCE** (2024)

üè¶ **Salaire Minimum**:
‚Ä¢ SMIC: ‚Ç¨1.766,92/mois (brut)
‚Ä¢ ‚Ç¨21.203/an

‚è∞ **Dur√©e du Travail**:
‚Ä¢ 35 heures/semaine (dur√©e l√©gale)
‚Ä¢ Maximum: 48h/semaine

üèñÔ∏è **Cong√©s Pay√©s**:
‚Ä¢ 5 semaines/an (25 jours ouvrables)

Source: Minist√®re du Travail France (2024)`;
  }

  /**
   * Get Germany-specific labor information
   */
  private static getGermanyLaborInfo(query: string): string {
    const queryLower = query.toLowerCase();
    
    if (queryLower.includes('mindestlohn') || queryLower.includes('minimum') || queryLower.includes('lohn') || queryLower.includes('wage')) {
      return `üìä **MINDESTLOHN DEUTSCHLAND** (2024)

üè¶ **Aktueller Mindestlohn**:
‚Ä¢ ‚Ç¨12,41 pro Stunde (seit Januar 2024)
‚Ä¢ ‚Ç¨2.154 pro Monat bei Vollzeit (40h/Woche)
‚Ä¢ ‚Ç¨25.848 pro Jahr (Vollzeit)

üìÖ **Entwicklung**:
‚Ä¢ 2023: ‚Ç¨12,00/Stunde
‚Ä¢ 2024: ‚Ç¨12,41/Stunde
‚Ä¢ J√§hrliche Anpassung durch Mindestlohnkommission

‚è∞ **Arbeitszeit f√ºr Berechnung**:
‚Ä¢ Vollzeit: 40 Stunden/Woche
‚Ä¢ Jahresarbeitszeit: ca. 2.080 Stunden

üí° **Wichtige Hinweise**:
‚Ä¢ Gilt f√ºr alle Arbeitnehmer ab 18 Jahren
‚Ä¢ Ausnahmen: Minderj√§hrige ohne Berufsausbildung
‚Ä¢ Praktikanten (unter bestimmten Bedingungen)

Quelle: Bundesministerium f√ºr Arbeit und Soziales (BMAS) 2024`;
    }
    
    if (queryLower.includes('arbeitszeit') || queryLower.includes('stunden') || queryLower.includes('hours')) {
      return `üìä **ARBEITSZEIT DEUTSCHLAND** (2024)

‚è∞ **Gesetzliche Arbeitszeit**:
‚Ä¢ Maximum: 8 Stunden/Tag, 48 Stunden/Woche
‚Ä¢ Verl√§ngerung m√∂glich: bis 10h/Tag bei Ausgleich
‚Ä¢ Ruhepausen: 30 Min bei >6h, 45 Min bei >9h

üè¢ **√úbliche Arbeitszeiten**:
‚Ä¢ Vollzeit: 35-40 Stunden/Woche
‚Ä¢ Teilzeit: individuell vereinbart
‚Ä¢ Gleitzeit: in vielen Unternehmen √ºblich

üìÖ **Ruhezeiten**:
‚Ä¢ T√§gliche Ruhezeit: mindestens 11 Stunden
‚Ä¢ W√∂chentliche Ruhezeit: 35 Stunden (meist Sa/So)

‚è∞ **√úberstunden**:
‚Ä¢ Verg√ºtung oder Freizeitausgleich
‚Ä¢ Maximale Mehrarbeit: 2h/Tag

Quelle: Arbeitszeitgesetz (ArbZG) Deutschland`;
    }
    
    if (queryLower.includes('urlaub') || queryLower.includes('vacation') || queryLower.includes('ferien')) {
      return `üìä **URLAUBSRECHT DEUTSCHLAND** (2024)

üèñÔ∏è **Gesetzlicher Mindesturl aub**:
‚Ä¢ 20 Werktage pro Jahr (6-Tage-Woche)
‚Ä¢ 24 Werktage pro Jahr (5-Tage-Woche)
‚Ä¢ Bei Vollzeit: mindestens 4 Wochen

üéØ **√úblicher Urlaub**:
‚Ä¢ Durchschnitt: 25-30 Tage/Jahr
‚Ä¢ Viele Tarifvertr√§ge: 30+ Tage
‚Ä¢ √ñffentlicher Dienst: oft 30 Tage

üìÖ **Urlaubsplanung**:
‚Ä¢ Antrag rechtzeitig stellen
‚Ä¢ Betriebliche Belange beachten
‚Ä¢ Urlaubsgeld: oft in Tarifvertr√§gen geregelt

üí∞ **Urlaubsentgelt**:
‚Ä¢ Fortzahlung des Arbeitsentgelts
‚Ä¢ Durchschnitt der letzten 13 Wochen

Quelle: Bundesurlaubsgesetz (BUrlG) Deutschland`;
    }
    
    return `üìä **ARBEITSRECHT DEUTSCHLAND** (2024)

üîç **Aktuelle Arbeitsrechtliche Bestimmungen**:

üè¶ **Mindestlohn**: ‚Ç¨12,41/Stunde (2024)
‚è∞ **Max. Arbeitszeit**: 48 Stunden/Woche
üèñÔ∏è **Mindesturl aub**: 20-24 Werktage/Jahr
üìÖ **Ruhezeit**: 11 Stunden t√§glich
üíº **K√ºndigungsschutz**: Nach 6 Monaten Betriebszugeh√∂rigkeit

üìö **Wichtige Gesetze**:
‚Ä¢ Arbeitszeitgesetz (ArbZG)
‚Ä¢ Bundesurlaubsgesetz (BUrlG)  
‚Ä¢ Mindestlohngesetz (MiLoG)
‚Ä¢ K√ºndigungsschutzgesetz (KSchG)

Quelle: Bundesministerium f√ºr Arbeit und Soziales (BMAS) 2024`;
  }

  /**
   * Get Portugal-specific labor information
   */
  private static getPortugalLaborInfo(query: string): string {
    return `üìä **DIREITO DO TRABALHO PORTUGAL** (2024)

üè¶ **Sal√°rio M√≠nimo Nacional**:
‚Ä¢ ‚Ç¨760,00/m√™s (desde janeiro 2024)
‚Ä¢ ‚Ç¨9.120/ano (12 meses + subs√≠dios)

‚è∞ **Hor√°rio de Trabalho**:
‚Ä¢ 40 horas/semana
‚Ä¢ 8 horas/dia (m√°ximo)

üèñÔ∏è **F√©rias**:
‚Ä¢ 22 dias √∫teis/ano
‚Ä¢ Subs√≠dio de f√©rias obrigat√≥rio

Fonte: C√≥digo do Trabalho Portugal (2024)`;
  }

  /**
   * Get Netherlands-specific labor information  
   */
  private static getNetherlandsLaborInfo(query: string): string {
    return `üìä **ARBEIDSRECHT NEDERLAND** (2024)

üè¶ **Minimumloon**:
‚Ä¢ ‚Ç¨13,27/uur (vanaf januari 2024)
‚Ä¢ ‚Ç¨2.316/maand (volledig)

‚è∞ **Arbeidstijd**:
‚Ä¢ Gemiddeld 40 uur/week
‚Ä¢ Maximum 12 uur/dag

üèñÔ∏è **Vakantie**:
‚Ä¢ Minimum 20 dagen/jaar
‚Ä¢ 8% vakantiegeld verplicht

Bron: Ministerie van Sociale Zaken Nederland (2024)`;
  }

  /**
   * Get Turkey-specific labor information
   */
  private static getTurkeyLaborInfo(query: string): string {
    return `üìä **T√úRKƒ∞YE ƒ∞≈û HUKUKU** (2024)

üè¶ **Asgari √úcret**:
‚Ä¢ ‚Ç∫17.002 TL/ay (2024)
‚Ä¢ Net: ‚Ç∫15.000 TL civarƒ±

‚è∞ **√áalƒ±≈üma Saatleri**:
‚Ä¢ 45 saat/hafta (yasal maximum)
‚Ä¢ G√ºnl√ºk 11 saat maximum

üèñÔ∏è **ƒ∞zin Haklarƒ±**:
‚Ä¢ Yƒ±llƒ±k √ºcretli izin: 14-26 g√ºn
‚Ä¢ Kƒ±dem yƒ±lƒ±na g√∂re deƒüi≈üir

Kaynak: √áalƒ±≈üma ve Sosyal G√ºvenlik Bakanlƒ±ƒüƒ± (2024)`;
  }

  /**
   * Get Russia-specific labor information
   */
  private static getRussiaLaborInfo(query: string): string {
    return `üìä **–¢–†–£–î–û–í–û–ï –ü–†–ê–í–û –†–û–°–°–ò–ò** (2024)

üè¶ **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞**:
‚Ä¢ 19.242 —Ä—É–±./–º–µ—Å—è—Ü (—Å 2024 –≥–æ–¥–∞)
‚Ä¢ 230.904 —Ä—É–±./–≥–æ–¥

‚è∞ **–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è**:
‚Ä¢ 40 —á–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é
‚Ä¢ 8 —á–∞—Å–æ–≤/–¥–µ–Ω—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)

üèñÔ∏è **–û—Ç–ø—É—Å–∫**:
‚Ä¢ 28 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π/–≥–æ–¥ (–º–∏–Ω–∏–º—É–º)
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ø—É—Å–∫–∞ –ø–æ –¢–ö –†–§

–ò—Å—Ç–æ—á–Ω–∏–∫: –¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§ (2024)`;
  }

  /**
   * Get Japan-specific labor information
   */
  private static getJapanLaborInfo(query: string): string {
    return `üìä **Êó•Êú¨„ÅÆÂä¥ÂÉçÊ≥ï** (2024Âπ¥)

üè¶ **ÊúÄ‰ΩéË≥ÉÈáë**:
‚Ä¢ ÂÖ®ÂõΩÂπ≥Âùá: ¬•901/ÊôÇÈñì (2024Âπ¥)
‚Ä¢ Êù±‰∫¨ÈÉΩ: ¬•1,113/ÊôÇÈñì

‚è∞ **Âä¥ÂÉçÊôÇÈñì**:
‚Ä¢ Ê≥ïÂÆöÂä¥ÂÉçÊôÇÈñì: 40ÊôÇÈñì/ÈÄ±
‚Ä¢ 1Êó•8ÊôÇÈñì„ÅåÂü∫Êú¨

üèñÔ∏è **ÊúâÁµ¶‰ºëÊöá**:
‚Ä¢ Âπ¥10Êó•„Äú20Êó• (Âã§Á∂öÂπ¥Êï∞„Å´„Çà„Çã)
‚Ä¢ ÂèñÂæóÁéáÂêë‰∏ä„ÅåË™≤È°å

Âá∫ÂÖ∏: ÂéöÁîüÂä¥ÂÉçÁúÅ (2024Âπ¥)`;
  }

  /**
   * Get Switzerland-specific labor information
   */
  private static getSwitzerlandLaborInfo(query: string): string {
    return `üìä **ARBEITSRECHT SCHWEIZ** (2024)

üè¶ **Mindestlohn**:
‚Ä¢ Kein gesetzlicher Mindestlohn auf Bundesebene
‚Ä¢ Kantone k√∂nnen eigene Mindestl√∂hne festlegen
‚Ä¢ Genf: CHF 24,32/Stunde (h√∂chster)
‚Ä¢ Basel: CHF 21,00/Stunde

‚è∞ **Arbeitszeit**:
‚Ä¢ 45 Stunden/Woche (B√ºro/Verwaltung)
‚Ä¢ 50 Stunden/Woche (andere Branchen)
‚Ä¢ Maximum 14 Stunden/Tag

üèñÔ∏è **Ferien**:
‚Ä¢ Minimum 20 Tage/Jahr (ab 20 Jahren)
‚Ä¢ 25 Tage/Jahr (unter 20 oder √ºber 50 Jahren)

Quelle: Schweizerisches Arbeitsgesetz (2024)`;
  }

  /**
   * Get Austria-specific labor information
   */
  private static getAustriaLaborInfo(query: string): string {
    return `üìä **ARBEITSRECHT √ñSTERREICH** (2024)

üè¶ **Mindestlohn**:
‚Ä¢ Kein gesetzlicher Mindestlohn
‚Ä¢ Kollektivvertr√§ge regeln Mindestentlohnung
‚Ä¢ Durchschnitt: ‚Ç¨1.800-2.200/Monat
‚Ä¢ Mindest-KV: ca. ‚Ç¨1.500/Monat

‚è∞ **Arbeitszeit**:
‚Ä¢ Normal: 40 Stunden/Woche
‚Ä¢ Maximum: 12 Stunden/Tag, 60h/Woche
‚Ä¢ Durchschnitt √ºber 17 Wochen: 48h/Woche

üèñÔ∏è **Urlaub**:
‚Ä¢ 30 Werktage/Jahr (ab 25 Jahren)
‚Ä¢ 25 Werktage/Jahr (unter 25 Jahren)
‚Ä¢ 36 Werktage nach 25 Dienstjahren

Quelle: Arbeitszeitgesetz √ñsterreich (2024)`;
  }

  /**
   * Get Belgium-specific labor information
   */
  private static getBelgiumLaborInfo(query: string): string {
    return `üìä **ARBEIDSRECHT BELGI√ã / DROIT DU TRAVAIL BELGIQUE** (2024)

üè¶ **Minimumloon / Salaire minimum**:
‚Ä¢ ‚Ç¨1.955,09/maand (volledig/temps plein)
‚Ä¢ ‚Ç¨13,04/uur (gemiddeld/moyenne)

‚è∞ **Arbeidstijd / Temps de travail**:
‚Ä¢ 38 uur/week (standaard/standard)
‚Ä¢ Maximum 11 uur/dag
‚Ä¢ Flexibele werktijden mogelijk

üèñÔ∏è **Vakantie / Cong√©s**:
‚Ä¢ 20 dagen/jaar (wettelijk minimum)
‚Ä¢ 10,27% vakantiegeld/p√©cule de vacances

Bron/Source: FOD Werkgelegenheid Belgi√´ (2024)`;
  }

  /**
   * Get UK-specific labor information
   */
  private static getUKLaborInfo(query: string): string {
    return `üìä **UK EMPLOYMENT LAW** (2024)

üè¶ **Minimum Wage**:
‚Ä¢ National Living Wage: ¬£11.44/hour (23+)
‚Ä¢ 21-22 years: ¬£8.60/hour
‚Ä¢ 18-20 years: ¬£6.40/hour
‚Ä¢ Apprentices: ¬£6.40/hour

‚è∞ **Working Hours**:
‚Ä¢ Maximum: 48 hours/week (opt-out possible)
‚Ä¢ Rest breaks: 20 minutes if >6 hours
‚Ä¢ Daily rest: 11 hours between shifts

üèñÔ∏è **Holiday Entitlement**:
‚Ä¢ 28 days/year (including bank holidays)
‚Ä¢ Part-time: pro-rata calculation

Source: UK Government Employment Law (2024)`;
  }

  /**
   * Get Canada-specific labor information
   */
  private static getCanadaLaborInfo(query: string): string {
    return `üìä **CANADIAN LABOUR LAW** (2024)

üè¶ **Minimum Wage** (varies by province):
‚Ä¢ Federal: CAD $17.30/hour
‚Ä¢ Ontario: CAD $17.20/hour
‚Ä¢ Alberta: CAD $15.00/hour
‚Ä¢ Quebec: CAD $15.75/hour

‚è∞ **Working Hours**:
‚Ä¢ Standard: 40 hours/week
‚Ä¢ Overtime: 1.5x pay after 44 hours/week
‚Ä¢ Maximum: varies by province

üèñÔ∏è **Vacation**:
‚Ä¢ 2 weeks/year minimum
‚Ä¢ 3 weeks after 5 years service
‚Ä¢ 4% vacation pay minimum

Source: Employment Standards Canada (2024)`;
  }

  /**
   * Get Mexico-specific labor information
   */
  private static getMexicoLaborInfo(query: string): string {
    return `
INFORMACI√ìN LABORAL DE M√âXICO (2025):

üí∞ SALARIOS M√çNIMOS (2025):
‚Ä¢ Zona Frontera Norte: $374.89 pesos/d√≠a
‚Ä¢ Resto del pa√≠s: $248.93 pesos/d√≠a
‚Ä¢ Salario m√≠nimo profesional: var√≠a por ocupaci√≥n

‚è∞ JORNADA LABORAL:
‚Ä¢ Diurna: m√°ximo 8 horas
‚Ä¢ Nocturna: m√°ximo 7 horas
‚Ä¢ Mixta: m√°ximo 7.5 horas
‚Ä¢ Semana laboral: 48 horas m√°ximo
‚Ä¢ Horas extras: m√°ximo 3 horas/d√≠a, 3 veces/semana

üèñÔ∏è VACACIONES:
‚Ä¢ Primer a√±o: 6 d√≠as laborables
‚Ä¢ Segundo a√±o: 8 d√≠as
‚Ä¢ A partir del cuarto: +2 d√≠as cada 5 a√±os
‚Ä¢ Prima vacacional: m√≠nimo 25% del salario de vacaciones

üéÅ PRESTACIONES OBLIGATORIAS:
‚Ä¢ Aguinaldo: m√≠nimo 15 d√≠as de salario (diciembre)
‚Ä¢ Prima vacacional: 25% del salario de vacaciones
‚Ä¢ Participaci√≥n de utilidades (PTU): m√°ximo 10% anual

ü§± PERMISOS:
‚Ä¢ Maternidad: 12 semanas (6 antes, 6 despu√©s del parto)
‚Ä¢ Paternidad: 5 d√≠as laborables
‚Ä¢ Lactancia: 2 descansos de 30 min/d√≠a hasta 6 meses

‚úÖ DERECHOS:
‚Ä¢ Indemnizaci√≥n por despido injustificado
‚Ä¢ 3 meses de salario + 20 d√≠as por a√±o trabajado
‚Ä¢ Estabilidad en el empleo

üè• SEGURIDAD SOCIAL:
‚Ä¢ IMSS: salud, riesgos, invalidez, vida, retiro
‚Ä¢ INFONAVIT: cr√©dito para vivienda
‚Ä¢ SAR: sistema de ahorro para el retiro

üìã CONTRATOS:
‚Ä¢ Por tiempo indeterminado (preferente)
‚Ä¢ Por tiempo determinado (m√°ximo 1 a√±o)
‚Ä¢ Por obra determinada
‚Ä¢ Periodo de prueba: m√°ximo 30 d√≠as

‚öñÔ∏è FUENTES: Ley Federal del Trabajo, STPS, CONASAMI
    `;
  }

  /**
   * Get Argentina-specific labor information
   */
  private static getArgentinaLaborInfo(query: string): string {
    return `
INFORMACI√ìN LABORAL DE ARGENTINA (2025):

üí∞ SALARIOS M√çNIMOS (2025):
‚Ä¢ SMVM: $234,315 pesos/mes (enero 2025)
‚Ä¢ Se ajusta peri√≥dicamente seg√∫n inflaci√≥n

‚è∞ JORNADA LABORAL:
‚Ä¢ Est√°ndar: 8 horas/d√≠a, 48 horas/semana
‚Ä¢ S√°bados: hasta 4 horas
‚Ä¢ Horas extras: m√°ximo 30 horas/mes
‚Ä¢ Pago extras: +50% d√≠as h√°biles, +100% domingos/feriados

üèñÔ∏è VACACIONES:
‚Ä¢ 0-5 a√±os: 14 d√≠as corridos
‚Ä¢ 5-10 a√±os: 21 d√≠as corridos
‚Ä¢ 10-20 a√±os: 28 d√≠as corridos
‚Ä¢ +20 a√±os: 35 d√≠as corridos

üéÅ AGUINALDO:
‚Ä¢ SAC: sueldo anual complementario
‚Ä¢ 50% en junio, 50% en diciembre
‚Ä¢ Equivale a 1/12 del total ganado

ü§± PERMISOS:
‚Ä¢ Maternidad: 90 d√≠as (45 antes, 45 despu√©s)
‚Ä¢ Paternidad: 2 d√≠as corridos
‚Ä¢ Lactancia: 2 descansos de 30 min/d√≠a
‚Ä¢ Excedencia: hasta 6 meses sin goce de sueldo

‚úÖ DERECHOS:
‚Ä¢ Indemnizaci√≥n por despido sin causa
‚Ä¢ 1 mes de sueldo por a√±o trabajado (m√≠n. 1 mes)
‚Ä¢ Preaviso: 15 d√≠as a 2 meses seg√∫n antig√ºedad
‚Ä¢ Integraci√≥n del mes de despido

üè• SEGURIDAD SOCIAL:
‚Ä¢ Obra Social obligatoria
‚Ä¢ Jubilaci√≥n y pensi√≥n (ANSES)
‚Ä¢ ART (riesgos del trabajo)
‚Ä¢ Asignaciones familiares

üìã CONTRATOS:
‚Ä¢ Indefinido (est√°ndar)
‚Ä¢ Plazo fijo (m√°ximo 5 a√±os)
‚Ä¢ Eventual
‚Ä¢ Per√≠odo de prueba: 3 meses

‚öñÔ∏è FUENTES: Ley de Contrato de Trabajo 20.744, Ministerio de Trabajo
    `;
  }

  /**
   * Get Brazil-specific labor information
   */
  private static getBrazilLaborInfo(query: string): string {
    return `
INFORMA√á√ÉO TRABALHISTA DO BRASIL (2025):

üí∞ SAL√ÅRIO M√çNIMO (2025):
‚Ä¢ R$ 1.518,00/m√™s (janeiro 2025)
‚Ä¢ Reajustado anualmente

‚è∞ JORNADA DE TRABALHO:
‚Ä¢ Padr√£o: 8 horas/dia, 44 horas/semana
‚Ä¢ M√°ximo: 48 horas/semana (com horas extras)
‚Ä¢ Horas extras: m√°ximo 2 horas/dia
‚Ä¢ Adicional: +50% (m√≠nimo)

üèñÔ∏è F√âRIAS:
‚Ä¢ 30 dias corridos por ano
‚Ä¢ Abono pecuni√°rio: "vender" 1/3 das f√©rias
‚Ä¢ Per√≠odo aquisitivo: 12 meses de trabalho

üéÅ 13¬∫ SAL√ÅRIO:
‚Ä¢ Gratifica√ß√£o natalina obrigat√≥ria
‚Ä¢ 1¬™ parcela: at√© 30/11 (50%)
‚Ä¢ 2¬™ parcela: at√© 20/12 (50%)

ü§± LICEN√áAS:
‚Ä¢ Maternidade: 120 dias
‚Ä¢ Paternidade: 5 dias (ou 20 dias em empresa cidad√£)
‚Ä¢ Amamenta√ß√£o: 2 intervalos de 30 min/dia at√© 6 meses

‚úÖ DIREITOS:
‚Ä¢ FGTS: 8% do sal√°rio mensal
‚Ä¢ Aviso pr√©vio: 30 dias + 3 dias/ano trabalhado
‚Ä¢ Multa rescis√≥ria: 40% do FGTS
‚Ä¢ Seguro-desemprego

üè• PREVID√äNCIA:
‚Ä¢ INSS obrigat√≥rio
‚Ä¢ Aux√≠lio-doen√ßa, aposentadoria
‚Ä¢ Sal√°rio-fam√≠lia, sal√°rio-maternidade

üìã CONTRATOS:
‚Ä¢ Indeterminado (padr√£o CLT)
‚Ä¢ Determinado (m√°ximo 2 anos)
‚Ä¢ Intermitente (lei 13.467/2017)
‚Ä¢ Experi√™ncia: m√°ximo 90 dias

‚öñÔ∏è FONTES: CLT, Minist√©rio do Trabalho e Previd√™ncia, TST
    `;
  }

  /**
   * Get Chile-specific labor information
   */
  private static getChileLaborInfo(query: string): string {
    return `
INFORMACI√ìN LABORAL DE CHILE (2025):

üí∞ SALARIOS M√çNIMOS (2025):
‚Ä¢ Ingreso M√≠nimo Mensual: $476.000 pesos (2025)
‚Ä¢ Trabajadores menores de 18 a√±os: $357.814 pesos
‚Ä¢ Trabajadores casa particular: $380.000 pesos

‚è∞ JORNADA LABORAL:
‚Ä¢ Ordinaria: 45 horas/semana m√°ximo
‚Ä¢ Jornada parcial: hasta 30 horas/semana
‚Ä¢ Horas extraordinarias: m√°ximo 2 horas/d√≠a
‚Ä¢ Pago extras: +50% (m√≠nimo)

üèñÔ∏è VACACIONES:
‚Ä¢ 15 d√≠as h√°biles anuales (m√≠nimo)
‚Ä¢ Progresivas: +1 d√≠a cada 3 a√±os (m√°ximo 20)
‚Ä¢ Feriado irrenunciable: m√≠nimo 10 d√≠as h√°biles

ü§± PERMISOS:
‚Ä¢ Pre y post natal: 18 semanas (6+12)
‚Ä¢ Permiso post natal parental: 12 semanas
‚Ä¢ Paternidad: 5 d√≠as h√°biles
‚Ä¢ Sala cuna: hasta 2 a√±os del hijo

‚úÖ DERECHOS:
‚Ä¢ Indemnizaci√≥n por a√±os de servicio
‚Ä¢ 30 d√≠as de remuneraci√≥n por a√±o (m√°ximo 330 d√≠as)
‚Ä¢ Fondo de Cesant√≠a (seguro desempleo)
‚Ä¢ Finiquito obligatorio ante notario

üè• SEGURIDAD SOCIAL:
‚Ä¢ Sistema previsional (AFP o INP)
‚Ä¢ FONASA o Isapre (salud)
‚Ä¢ Seguro de cesant√≠a
‚Ä¢ Ley de Accidentes del Trabajo

üìã CONTRATOS:
‚Ä¢ Indefinido (est√°ndar)
‚Ä¢ Plazo fijo (m√°ximo 1 a√±o, renovable por 1 a√±o m√°s)
‚Ä¢ Por obra o faena
‚Ä¢ Plazo de prueba: hasta 6 meses profesionales

‚öñÔ∏è FUENTES: C√≥digo del Trabajo, Direcci√≥n del Trabajo (DT)
    `;
  }

  /**
   * Get Colombia-specific labor information
   */
  private static getColombiaLaborInfo(query: string): string {
    return `
INFORMACI√ìN LABORAL DE COLOMBIA (2025):

üí∞ SALARIOS M√çNIMOS (2025):
‚Ä¢ SMMLV: $1.423.500 pesos/mes (2025)
‚Ä¢ Auxilio de transporte: $162.000 pesos/mes
‚Ä¢ Total devengado m√≠nimo: $1.585.500 pesos

‚è∞ JORNADA LABORAL:
‚Ä¢ Ordinaria diurna: 8 horas/d√≠a, 48 horas/semana
‚Ä¢ Nocturna: 6:00 PM - 6:00 AM (+35%)
‚Ä¢ Dominical y festiva: +75%
‚Ä¢ Horas extras diurnas: +25%
‚Ä¢ Horas extras nocturnas: +75%

üèñÔ∏è VACACIONES:
‚Ä¢ 15 d√≠as h√°biles por a√±o trabajado
‚Ä¢ Compensaci√≥n en dinero: m√°ximo 50%
‚Ä¢ Vacaciones colectivas permitidas

üéÅ PRESTACIONES SOCIALES:
‚Ä¢ Prima de servicios: 30 d√≠as de salario (15 jun, 15 dic)
‚Ä¢ Cesant√≠as: 1 mes de salario por a√±o
‚Ä¢ Intereses cesant√≠as: 12% anual
‚Ä¢ Dotaci√≥n: 3 veces/a√±o (calzado y vestido)

ü§± PERMISOS:
‚Ä¢ Maternidad: 18 semanas
‚Ä¢ Paternidad: 2 semanas (8 d√≠as h√°biles)
‚Ä¢ Lactancia: 2 descansos de 30 min/d√≠a hasta 6 meses

‚úÖ DERECHOS:
‚Ä¢ Indemnizaci√≥n despido sin justa causa
‚Ä¢ Contratos < 1 a√±o: 45 d√≠as de salario
‚Ä¢ Contratos ‚â• 1 a√±o: 45 d√≠as + 15 d√≠as/a√±o adicional
‚Ä¢ Fuero sindical y maternidad

üè• SEGURIDAD SOCIAL:
‚Ä¢ EPS: salud (4% trabajador, 8.5% empleador)
‚Ä¢ AFP: pensi√≥n (4% trabajador, 12% empleador)  
‚Ä¢ ARL: riesgos laborales (empleador)
‚Ä¢ Cajas compensaci√≥n: 4% empleador

üìã CONTRATOS:
‚Ä¢ Indefinido (est√°ndar)
‚Ä¢ Fijo (m√°ximo 3 a√±os)
‚Ä¢ Obra o labor
‚Ä¢ Per√≠odo de prueba: hasta 2 meses

‚öñÔ∏è FUENTES: C√≥digo Sustantivo del Trabajo, Ministerio del Trabajo
    `;
  }

  /**
   * Get Peru-specific labor information
   */
  private static getPeruLaborInfo(query: string): string {
    return `
INFORMACI√ìN LABORAL DEL PER√ö (2025):

üí∞ SALARIOS M√çNIMOS (2025):
‚Ä¢ RMV: S/. 1,025 soles/mes (desde mayo 2022)
‚Ä¢ Trabajadores del hogar: S/. 1,025 soles/mes
‚Ä¢ Microempresas: pueden acordar menor remuneraci√≥n

‚è∞ JORNADA LABORAL:
‚Ä¢ Ordinaria: 8 horas/d√≠a, 48 horas/semana
‚Ä¢ Horas extras: m√°ximo 8 horas/semana
‚Ä¢ Pago extras: +25% (m√≠nimo)
‚Ä¢ Trabajo nocturno: 10 PM - 6 AM (+35%)

üèñÔ∏è VACACIONES:
‚Ä¢ 30 d√≠as calendario por a√±o trabajado
‚Ä¢ R√©cord vacacional: 12 meses continuos
‚Ä¢ Compensaci√≥n: 1/3 puede venderse

üéÅ GRATIFICACIONES:
‚Ä¢ Fiestas Patrias: 1 sueldo (julio)
‚Ä¢ Navidad: 1 sueldo (diciembre)
‚Ä¢ Bonificaci√≥n adicional: 9% sobre gratificaci√≥n

ü§± PERMISOS:
‚Ä¢ Pre-natal: 45 d√≠as antes del parto
‚Ä¢ Post-natal: 45 d√≠as despu√©s del parto
‚Ä¢ Paternidad: 10 d√≠as calendarios
‚Ä¢ Lactancia: 1 hora diaria hasta 1 a√±o del beb√©

‚úÖ DERECHOS:
‚Ä¢ CTS: Compensaci√≥n por Tiempo de Servicios
‚Ä¢ 1 sueldo por a√±o depositado mayo/noviembre
‚Ä¢ Indemnizaci√≥n despido: 1.5 sueldo/a√±o trabajado
‚Ä¢ Asignaci√≥n familiar: 10% RMV por hijo menor

üè• SEGURIDAD SOCIAL:
‚Ä¢ EsSalud: 9% empleador
‚Ä¢ ONP o AFP: 13% trabajador
‚Ä¢ SCTR: seguro accidentes (empleador)

üìã CONTRATOS:
‚Ä¢ Indefinido (est√°ndar)
‚Ä¢ Sujeto a modalidad (plazo determinado)
‚Ä¢ Part-time (menos de 4 horas/d√≠a)
‚Ä¢ Per√≠odo de prueba: 3 meses (empleados), 6 meses (confianza)

‚öñÔ∏è FUENTES: TUO Ley de Productividad y Competitividad Laboral, MTPE
    `;
  }

  /**
   * Get general labor information
   */
  private static getGeneralLaborInfo(query: string): string {
    return `üìä **INFORMACI√ìN LABORAL GENERAL** (2024)

‚ö†Ô∏è Las condiciones laborales var√≠an significativamente por pa√≠s.

üåç **Est√°ndares Internacionales** (OIT):
‚Ä¢ Jornada m√°xima: 48 horas/semana
‚Ä¢ Vacaciones m√≠nimas: 2-3 semanas/a√±o
‚Ä¢ Descanso semanal: 24 horas consecutivas

üí° **Recomendaci√≥n**: Para informaci√≥n espec√≠fica, consulta:
‚Ä¢ Ministerio de Trabajo de tu pa√≠s
‚Ä¢ Legislaci√≥n laboral nacional
‚Ä¢ Convenios colectivos aplicables

Fuente: Organizaci√≥n Internacional del Trabajo (OIT)`;
  }

  /**
   * Send a chat message with intelligent provider selection and web search
   */
  static async sendMessage(
    message: string,
    language: SupportedLanguage = 'en',
    conversationHistory: any[] = [],
    onSearchProgress?: (sources: WebSearchResult[]) => void
  ): Promise<AIResponse> {
    const startTime = Date.now();
    const provider = await this.selectOptimalProvider('chat');
    
    // Check cache first
    if (this.config.enableCaching) {
      const cacheKey = this.generateCacheKey('chat', message, language);
      const cached = this.getFromCache(cacheKey);
      if (cached) {
        return {
          success: true,
          data: cached,
          provider,
          cached: true,
          performance: {
            duration: Date.now() - startTime,
            inputSize: message.length,
            outputSize: cached.length,
          },
        };
      }
    }

    try {
      let result: string;
      let searchingSources: WebSearchResult[] = [];
      
      // Check if this is a labor law question
      const laborCheck = this.detectLaborQuestion(message);
      
      // Handle location questions first
      if (laborCheck.isLocationQuestion) {
        // Clear any existing cache for location questions and generate fresh response
        const locationCacheKey = this.generateCacheKey('location', message, language);
        
        // Force clear existing cache for debugging
        this.cache.delete(locationCacheKey);
        console.log('üßπ [DEBUG] Cleared location cache, generating fresh response');

        const userCountry = await this.getUserCountry(language);
        console.log(`üìç [LOCATION-QUESTION] Usuario pregunta ubicaci√≥n, pa√≠s detectado: ${userCountry}`);
        
        // Direct response without calling AI - we know the answer
        const result = userCountry ? 
          `Seg√∫n la configuraci√≥n de tu dispositivo, te encuentras en: **${userCountry}**.

Esta detecci√≥n se basa en la configuraci√≥n regional de tu dispositivo. Si no es correcto, puedes especificar tu pa√≠s cuando hagas preguntas espec√≠ficas.

¬øTe gustar√≠a que te ayude con alguna informaci√≥n laboral espec√≠fica de tu regi√≥n?` :
          `No puedo detectar tu ubicaci√≥n espec√≠fica desde la configuraci√≥n de tu dispositivo. 

Para ayudarte mejor con informaci√≥n laboral espec√≠fica, puedes incluir tu pa√≠s en tus preguntas, por ejemplo: "salario m√≠nimo en Espa√±a" o "vacaciones en Francia".

¬øEn qu√© pa√≠s te encuentras y con qu√© tema laboral te puedo ayudar?`;
        
        // Cache the result (reuse the existing locationCacheKey)
        console.log(`üíæ [CACHE] Saving location result to cache: "${result}"`);
        this.setInCache(locationCacheKey, result, this.CACHE_TTL);
        
        return {
          success: true,
          data: result,
          provider: provider,
          cached: false,
          performance: {
            duration: Date.now() - startTime,
            inputSize: message.length,
            outputSize: result.length
          }
        };
      } else if (laborCheck.isLaborQuestion) {
        // If no country is specified in the message, try to detect user's country
        let targetCountry = laborCheck.country;
        if (!targetCountry) {
          targetCountry = await this.getUserCountry(language);
          console.log(`üéØ [SMART-SEARCH] No se especific√≥ pa√≠s, usando pa√≠s del usuario: ${targetCountry}`);
        }
        
        // Search for labor information
        const searchResult = await this.searchLaborInfo(
          message,
          targetCountry,
          language,
          onSearchProgress
        );
        searchingSources = searchResult.sources;
        
        // Enhance the message with search results - Create a focused prompt for labor questions
        const countryContext = targetCountry ? 
          `\n\nCONTEXTO DEL USUARIO: El usuario est√° en ${targetCountry} (detectado autom√°ticamente${laborCheck.country ? '' : ' por idioma'}).` : 
          '';
          
        const enhancedMessage = `ERES UN EXPERTO EN LEGISLACI√ìN LABORAL INTERNACIONAL. 

El usuario pregunta: "${message}"${countryContext}

Informaci√≥n actualizada obtenida de fuentes oficiales:
${searchResult.info}

INSTRUCCIONES:
- Responde DIRECTAMENTE con la informaci√≥n de b√∫squeda proporcionada
- NO digas que no tienes acceso a informaci√≥n actualizada
- Si detectaste el pa√≠s del usuario autom√°ticamente, menciona que la informaci√≥n es espec√≠fica para su pa√≠s
- Presenta los datos de forma clara y profesional
- Menciona las fuentes consultadas al final
- Si la informaci√≥n es espec√≠fica de un pa√≠s, enf√≥cate en ese pa√≠s

Responde de manera directa y √∫til usando la informaci√≥n proporcionada.`;
        
        if (provider === 'openai') {
          if (conversationHistory.length > 0) {
            result = await OpenAIService.getChatResponseWithContext(enhancedMessage, conversationHistory, undefined, language);
          } else {
            result = await OpenAIService.getChatResponse(enhancedMessage, language);
          }
        } else {
          if (conversationHistory.length > 0) {
            result = await GoogleVisionService.getChatResponseWithContext(enhancedMessage, conversationHistory, undefined, language);
          } else {
            result = await GoogleVisionService.getChatResponse(enhancedMessage, language);
          }
        }
      } else {
        // Regular message without web search
        if (provider === 'openai') {
          if (conversationHistory.length > 0) {
            result = await OpenAIService.getChatResponseWithContext(message, conversationHistory, undefined, language);
          } else {
            result = await OpenAIService.getChatResponse(message, language);
          }
        } else {
          if (conversationHistory.length > 0) {
            result = await GoogleVisionService.getChatResponseWithContext(message, conversationHistory, undefined, language);
          } else {
            result = await GoogleVisionService.getChatResponse(message, language);
          }
        }
      }

      // Cache successful results
      if (this.config.enableCaching && result && !result.includes('Error')) {
        const cacheKey = this.generateCacheKey('chat', message, language);
        this.setInCache(cacheKey, result, this.CACHE_TTL);
      }

      const endTime = Date.now();
      return {
        success: true,
        data: result,
        provider,
        searchingSources: searchingSources.length > 0 ? searchingSources : undefined,
        performance: {
          duration: endTime - startTime,
          inputSize: message.length,
          outputSize: result.length,
        },
      };

    } catch (error) {
      const processedError = AIErrorHandler.processError(error, provider, language);
      
      return {
        success: false,
        error: processedError.userMessage,
        provider,
        performance: {
          duration: Date.now() - startTime,
          inputSize: message.length,
          outputSize: 0,
        },
      };
    }
  }

  /**
   * Analyze image with optimization and intelligent provider selection
   */
  static async analyzeImage(
    imageUri: string,
    prompt: string,
    language: SupportedLanguage = 'en',
    analysisType: 'general' | 'document' | 'schedule' = 'general'
  ): Promise<AIResponse> {
    const startTime = Date.now();
    const provider = await this.selectOptimalProvider('vision');
    let inputSize = 0;

    try {
      // Validate image first
      const validation = await ImageOptimizationService.validateImage(imageUri);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error || 'Invalid image',
          provider,
          performance: {
            duration: Date.now() - startTime,
            inputSize: 0,
            outputSize: 0,
          },
        };
      }

      inputSize = validation.fileSize || 0;

      // Check cache
      if (this.config.enableCaching) {
        const cacheKey = this.generateCacheKey('vision', `${imageUri}:${prompt}`, language);
        const cached = this.getFromCache(cacheKey);
        if (cached) {
          return {
            success: true,
            data: cached,
            provider,
            cached: true,
            performance: {
              duration: Date.now() - startTime,
              inputSize,
              outputSize: cached.length,
            },
          };
        }
      }

      let result: string;

      if (provider === 'openai') {
        result = await OpenAIService.analyzeImageWithGPTVision(imageUri, prompt, language);
      } else {
        result = await GoogleVisionService.analyzeWorkPlan(imageUri, prompt, language);
      }

      // Cache successful results
      if (this.config.enableCaching && result && !result.includes('Error')) {
        const cacheKey = this.generateCacheKey('vision', `${imageUri}:${prompt}`, language);
        this.setInCache(cacheKey, result, this.CACHE_TTL * 2); // Longer cache for vision
      }

      const endTime = Date.now();
      return {
        success: true,
        data: result,
        provider,
        performance: {
          duration: endTime - startTime,
          inputSize,
          outputSize: result.length,
        },
      };

    } catch (error) {
      const processedError = AIErrorHandler.processError(error, provider, language);
      
      return {
        success: false,
        error: processedError.userMessage,
        provider,
        performance: {
          duration: Date.now() - startTime,
          inputSize,
          outputSize: 0,
        },
      };
    }
  }

  /**
   * Process PDF document
   */
  static async processPDF(
    pdfUri: string,
    prompt: string,
    fileName: string,
    language: SupportedLanguage = 'en'
  ): Promise<AIResponse> {
    const startTime = Date.now();
    const provider = await this.selectOptimalProvider('document');

    try {
      let result: string;

      if (provider === 'openai') {
        // OpenAI doesn't support PDF directly
        result = `OpenAI no puede procesar PDFs directamente. Por favor, convierte "${fileName}" a imagen y env√≠ala.`;
      } else {
        result = await GoogleVisionService.analyzePDFDocument(pdfUri, fileName, prompt, language);
      }

      const endTime = Date.now();
      return {
        success: true,
        data: result,
        provider,
        performance: {
          duration: endTime - startTime,
          inputSize: 0, // PDF size would need to be calculated
          outputSize: result.length,
        },
      };

    } catch (error) {
      const processedError = AIErrorHandler.processError(error, provider, language);
      
      return {
        success: false,
        error: processedError.userMessage,
        provider,
        performance: {
          duration: Date.now() - startTime,
          inputSize: 0,
          outputSize: 0,
        },
      };
    }
  }

  /**
   * Get service health and recommendations
   */
  static async getServiceHealth(): Promise<{
    overallHealth: 'excellent' | 'good' | 'degraded' | 'poor';
    providers: Record<string, { available: boolean; latency: number; reliability: number }>;
    recommendations: string[];
    costEfficiency: { totalSpent: number; averageCost: number; trend: 'increasing' | 'stable' | 'decreasing' };
  }> {
    const insights = await AIAnalyticsService.getPerformanceInsights();
    const stats = await AIAnalyticsService.getUsageStats();

    // Calculate provider health
    const providers: Record<string, { available: boolean; latency: number; reliability: number }> = {
      openai: { available: true, latency: 0, reliability: 0 },
      google: { available: true, latency: 0, reliability: 0 },
    };

    // Generate recommendations based on analytics
    const recommendations: string[] = [];
    
    if (insights.costEfficiencyReport.totalSpent > 10) {
      recommendations.push('Consider using image optimization to reduce API costs');
    }
    
    if (stats.averageResponseTime > 5000) {
      recommendations.push('Response times are high. Consider switching providers or optimizing requests');
    }

    if (insights.errorAnalysis.length > 0) {
      recommendations.push(`Address frequent ${insights.errorAnalysis[0].errorCode} errors`);
    }

    // Determine overall health
    const successRate = stats.successfulRequests / Math.max(stats.totalRequests, 1);
    let overallHealth: 'excellent' | 'good' | 'degraded' | 'poor' = 'excellent';
    
    if (successRate < 0.5) overallHealth = 'poor';
    else if (successRate < 0.7) overallHealth = 'degraded';
    else if (successRate < 0.9) overallHealth = 'good';

    return {
      overallHealth,
      providers,
      recommendations,
      costEfficiency: {
        totalSpent: insights.costEfficiencyReport.totalSpent,
        averageCost: insights.costEfficiencyReport.averageCostPerRequest,
        trend: 'stable', // Would need historical data to determine trend
      },
    };
  }

  /**
   * Update service configuration
   */
  static updateConfig(newConfig: Partial<AIServiceConfig>): void {
    this.config = { ...this.config, ...newConfig };
    console.log('üîß [AI-SERVICE] Configuration updated:', this.config);
  }

  /**
   * Clear cache
   */
  static clearCache(): void {
    this.cache.clear();
    console.log('üßπ [AI-SERVICE] Cache cleared');
  }

  /**
   * Get current configuration
   */
  static getConfig(): AIServiceConfig {
    return { ...this.config };
  }

  // Private helper methods

  private static async selectOptimalProvider(operation: 'chat' | 'vision' | 'document'): Promise<'openai' | 'google'> {
    if (this.config.provider === 'openai') return 'openai';
    if (this.config.provider === 'google') return 'google';

    // Intelligent provider selection based on operation type and analytics
    const insights = await AIAnalyticsService.getPerformanceInsights();
    
    // For document processing, prefer Google (supports PDF)
    if (operation === 'document') return 'google';
    
    // For other operations, use the most reliable provider
    return insights.mostReliableProvider as 'openai' | 'google' || 'google';
  }

  private static generateCacheKey(operation: string, input: string, language: string): string {
    const hash = this.simpleHash(input);
    return `${operation}:${language}:${hash}`;
  }

  private static simpleHash(str: string): string {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return hash.toString(36);
  }

  private static getFromCache(key: string): string | null {
    const cached = this.cache.get(key);
    
    if (cached && Date.now() - cached.timestamp < cached.ttl) {
      console.log('üíæ [CACHE] Cache hit for key:', key);
      return cached.data;
    }
    
    if (cached) {
      this.cache.delete(key); // Remove expired cache
    }
    
    return null;
  }

  private static setInCache(key: string, data: string, ttl: number): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl,
    });
    
    console.log('üíæ [CACHE] Cached result for key:', key);
    
    // Clean up old cache entries periodically
    if (this.cache.size > 100) {
      this.cleanupCache();
    }
  }

  private static cleanupCache(): void {
    const now = Date.now();
    for (const [key, value] of this.cache.entries()) {
      if (now - value.timestamp >= value.ttl) {
        this.cache.delete(key);
      }
    }
    console.log('üßπ [CACHE] Cleanup completed, cache size:', this.cache.size);
  }
}
