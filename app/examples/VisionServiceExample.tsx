import React from 'react';
import { GoogleVisionService } from '../services/GoogleVisionService';
import { useLanguage } from '../contexts/LanguageContext';

/**
 * EJEMPLO DE USO DEL GoogleVisionService CON IDIOMAS
 * 
 * Este ejemplo muestra c√≥mo usar el GoogleVisionService actualizado
 * que ahora soporta m√∫ltiples idiomas. Los prompts se env√≠an en el
 * idioma configurado por el usuario en la app.
 */

export const VisionServiceExample = () => {
  const { language } = useLanguage(); // Obtiene el idioma actual de la app

  // Ejemplo 1: An√°lisis b√°sico de imagen con idioma
  const analyzeImageBasic = async (imageUri: string) => {
    try {
      // El m√©todo ahora recibe el idioma como tercer par√°metro
      const result = await GoogleVisionService.analyzeImage(
        imageUri, 
        ['TEXT_DETECTION', 'LABEL_DETECTION'], 
        language // üî• NUEVO: idioma actual de la app
      );
      
      console.log('Resultado del an√°lisis:', result);
      return result;
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Ejemplo 2: Extraer solo texto con idioma
  const extractText = async (imageUri: string) => {
    try {
      // Los mensajes de error se mostrar√°n en el idioma del usuario
      const text = await GoogleVisionService.extractTextOnly(
        imageUri,
        language // üî• NUEVO: idioma actual
      );
      
      console.log('Texto extra√≠do:', text);
      return text;
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Ejemplo 3: Descripci√≥n completa de imagen con idioma
  const getDescription = async (imageUri: string) => {
    try {
      // Las etiquetas y descripciones se mostrar√°n en el idioma del usuario
      const description = await GoogleVisionService.getImageDescription(
        imageUri,
        language // üî• NUEVO: idioma actual
      );
      
      console.log('Descripci√≥n completa:', description);
      return description;
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Ejemplo 4: Chat con Gemini en el idioma del usuario
  const chatWithGemini = async (message: string) => {
    try {
      // El asistente responder√° en el idioma del usuario
      const response = await GoogleVisionService.getChatResponse(
        message,
        language // üî• NUEVO: el prompt se env√≠a en el idioma configurado
      );
      
      console.log('Respuesta del chat:', response);
      return response;
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Ejemplo 5: An√°lisis de plan de trabajo con Gemini Vision
  const analyzePlan = async (imageUri: string, userMessage: string) => {
    try {
      // El an√°lisis se realizar√° en el idioma del usuario
      const analysis = await GoogleVisionService.analyzeImageWithGeminiVision(
        imageUri,
        userMessage,
        language // üî• NUEVO: an√°lisis en idioma configurado
      );
      
      console.log('An√°lisis del plan:', analysis);
      return analysis;
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Ejemplo 6: An√°lisis h√≠brido de plan de trabajo
  const analyzeWorkPlan = async (imageUri: string, userMessage: string) => {
    try {
      // Combina Gemini Vision + Vision API, todo en el idioma del usuario
      const result = await GoogleVisionService.analyzeWorkPlan(
        imageUri,
        userMessage,
        language // üî• NUEVO: an√°lisis multimodal en idioma configurado
      );
      
      console.log('An√°lisis h√≠brido:', result);
      return result;
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Ejemplo 7: Chat con contexto conversacional
  const chatWithContext = async (
    message: string, 
    conversationHistory: any[], 
    currentImage?: string
  ) => {
    try {
      // El contexto conversacional se maneja en el idioma del usuario
      const response = await GoogleVisionService.getChatResponseWithContext(
        message,
        conversationHistory,
        currentImage,
        language // üî• NUEVO: contexto en idioma configurado
      );
      
      console.log('Respuesta con contexto:', response);
      return response;
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Ejemplo 8: An√°lisis de documentos PDF
  const analyzePDF = async (
    documentUri: string, 
    documentName: string, 
    userMessage: string
  ) => {
    try {
      // Los PDFs se analizan en el idioma del usuario
      const analysis = await GoogleVisionService.analyzePDFDocument(
        documentUri,
        documentName,
        userMessage,
        language // üî• NUEVO: an√°lisis de PDF en idioma configurado
      );
      
      console.log('An√°lisis del PDF:', analysis);
      return analysis;
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div>
      <h2>Ejemplos de GoogleVisionService con Idiomas</h2>
      <p>Idioma actual: <strong>{language}</strong></p>
      
      <h3>Funciones disponibles:</h3>
      <ul>
        <li>analyzeImage() - An√°lisis b√°sico con OCR y detecci√≥n</li>
        <li>extractTextOnly() - Solo extracci√≥n de texto</li>
        <li>getImageDescription() - Descripci√≥n completa</li>
        <li>getChatResponse() - Chat con Gemini</li>
        <li>analyzeImageWithGeminiVision() - An√°lisis inteligente</li>
        <li>analyzeWorkPlan() - An√°lisis h√≠brido</li>
        <li>getChatResponseWithContext() - Chat con contexto</li>
        <li>analyzePDFDocument() - An√°lisis de PDFs</li>
      </ul>

      <h3>Ventajas de la actualizaci√≥n:</h3>
      <ul>
        <li>‚úÖ Prompts en 5 idiomas (es, en, de, fr, it)</li>
        <li>‚úÖ Mensajes de error traducidos</li>
        <li>‚úÖ Respuestas del asistente en idioma del usuario</li>
        <li>‚úÖ Compatibilidad hacia atr√°s (ingl√©s por defecto)</li>
        <li>‚úÖ Detecci√≥n autom√°tica de idioma no soportado</li>
      </ul>
    </div>
  );
};

/**
 * CASOS DE USO COMUNES:
 * 
 * 1. Usuario con app en espa√±ol:
 *    - language = 'es'
 *    - Prompts se env√≠an en espa√±ol
 *    - Gemini responde en espa√±ol
 *    - Errores en espa√±ol
 * 
 * 2. Usuario con app en alem√°n:
 *    - language = 'de' 
 *    - Prompts se env√≠an en alem√°n
 *    - Gemini responde en alem√°n
 *    - Errores en alem√°n
 * 
 * 3. Usuario con idioma no soportado:
 *    - language = 'pt' (no soportado)
 *    - Fallback a ingl√©s autom√°ticamente
 *    - Funcionamiento normal en ingl√©s
 */

export default VisionServiceExample;